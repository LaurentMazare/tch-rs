// THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT BY HAND!

tensor *atg_abs(tensor self);
tensor *atg_abs_(tensor self);
tensor *atg_abs_out(tensor result, tensor self);
tensor *atg_acos(tensor self);
tensor *atg_acos_(tensor self);
tensor *atg_acos_out(tensor result, tensor self);
tensor *atg_adaptive_avg_pool1d(tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_adaptive_avg_pool2d(tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_adaptive_avg_pool2d_backward(tensor grad_output, tensor self);
tensor *atg_adaptive_avg_pool2d_backward_out(tensor grad_input, tensor grad_output, tensor self);
tensor *atg_adaptive_avg_pool2d_out(tensor output, tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_adaptive_avg_pool3d(tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_adaptive_avg_pool3d_backward(tensor grad_output, tensor self);
tensor *atg_adaptive_avg_pool3d_backward_out(tensor grad_input, tensor grad_output, tensor self);
tensor *atg_adaptive_avg_pool3d_out(tensor output, tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_adaptive_max_pool1d(tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_adaptive_max_pool2d(tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_adaptive_max_pool2d_backward(tensor grad_output, tensor self, tensor indices);
tensor *atg_adaptive_max_pool2d_backward_out(tensor grad_input, tensor grad_output, tensor self, tensor indices);
tensor *atg_adaptive_max_pool2d_out(tensor output, tensor indices, tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_adaptive_max_pool3d(tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_adaptive_max_pool3d_backward(tensor grad_output, tensor self, tensor indices);
tensor *atg_adaptive_max_pool3d_backward_out(tensor grad_input, tensor grad_output, tensor self, tensor indices);
tensor *atg_adaptive_max_pool3d_out(tensor output, tensor indices, tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_add(tensor self, tensor other);
tensor *atg_add1(tensor self, scalar other);
tensor *atg_add_(tensor self, tensor other);
tensor *atg_add_1(tensor self, scalar other);
tensor *atg_add_out(tensor result, tensor self, tensor other);
tensor *atg_addbmm(tensor self, tensor batch1, tensor batch2);
tensor *atg_addbmm_(tensor self, tensor batch1, tensor batch2);
tensor *atg_addbmm_out(tensor result, tensor self, tensor batch1, tensor batch2);
tensor *atg_addcdiv(tensor self, tensor tensor1, tensor tensor2);
tensor *atg_addcdiv_(tensor self, tensor tensor1, tensor tensor2);
tensor *atg_addcdiv_out(tensor result, tensor self, tensor tensor1, tensor tensor2);
tensor *atg_addcmul(tensor self, tensor tensor1, tensor tensor2);
tensor *atg_addcmul_(tensor self, tensor tensor1, tensor tensor2);
tensor *atg_addcmul_out(tensor result, tensor self, tensor tensor1, tensor tensor2);
tensor *atg_addmm(tensor self, tensor mat1, tensor mat2);
tensor *atg_addmm_(tensor self, tensor mat1, tensor mat2);
tensor *atg_addmm_out(tensor result, tensor self, tensor mat1, tensor mat2);
tensor *atg_addmv(tensor self, tensor mat, tensor vec);
tensor *atg_addmv_(tensor self, tensor mat, tensor vec);
tensor *atg_addmv_out(tensor result, tensor self, tensor mat, tensor vec);
tensor *atg_addr(tensor self, tensor vec1, tensor vec2);
tensor *atg_addr_(tensor self, tensor vec1, tensor vec2);
tensor *atg_addr_out(tensor result, tensor self, tensor vec1, tensor vec2);
tensor *atg_alias(tensor self);
tensor *atg_all(tensor self);
tensor *atg_all1(tensor self, int64_t dim, int keepdim);
tensor *atg_all_out(tensor result, tensor self, int64_t dim, int keepdim);
tensor *atg_alpha_dropout(tensor input, double p, int train);
tensor *atg_alpha_dropout_(tensor self, double p, int train);
tensor *atg_any(tensor self);
tensor *atg_any1(tensor self, int64_t dim, int keepdim);
tensor *atg_any_out(tensor result, tensor self, int64_t dim, int keepdim);
tensor *atg_arange(scalar end, int options_kind, int options_device);
tensor *atg_arange1(scalar start, scalar end, int options_kind, int options_device);
tensor *atg_arange2(scalar start, scalar end, scalar step, int options_kind, int options_device);
tensor *atg_arange_out(tensor result, scalar end);
tensor *atg_arange_out1(tensor result, scalar start, scalar end);
tensor *atg_arange_out2(tensor result, scalar start, scalar end, scalar step);
tensor *atg_argmax(tensor self);
tensor *atg_argmax1(tensor self, int64_t dim, int keepdim);
tensor *atg_argmin(tensor self);
tensor *atg_argmin1(tensor self, int64_t dim, int keepdim);
tensor *atg_as_strided(tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len);
tensor *atg_as_strided1(tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int64_t storage_offset);
tensor *atg_as_strided_(tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len);
tensor *atg_as_strided_1(tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int64_t storage_offset);
tensor *atg_asin(tensor self);
tensor *atg_asin_(tensor self);
tensor *atg_asin_out(tensor result, tensor self);
tensor *atg_atan(tensor self);
tensor *atg_atan2(tensor self, tensor other);
tensor *atg_atan2_(tensor self, tensor other);
tensor *atg_atan2_out(tensor result, tensor self, tensor other);
tensor *atg_atan_(tensor self);
tensor *atg_atan_out(tensor result, tensor self);
tensor *atg_avg_pool1d(tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad);
tensor *atg_avg_pool2d(tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad);
tensor *atg_avg_pool2d_backward(tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad);
tensor *atg_avg_pool2d_backward_out(tensor grad_input, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad);
tensor *atg_avg_pool2d_out(tensor output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad);
tensor *atg_avg_pool3d(tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad);
tensor *atg_avg_pool3d_backward(tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad);
tensor *atg_avg_pool3d_backward_out(tensor grad_input, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad);
tensor *atg_avg_pool3d_out(tensor output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad);
tensor *atg_baddbmm(tensor self, tensor batch1, tensor batch2);
tensor *atg_baddbmm_(tensor self, tensor batch1, tensor batch2);
tensor *atg_baddbmm_out(tensor result, tensor self, tensor batch1, tensor batch2);
tensor *atg_bartlett_window(int64_t window_length, int options_kind, int options_device);
tensor *atg_bartlett_window1(int64_t window_length, int periodic, int options_kind, int options_device);
tensor *atg_batch_norm(tensor input, tensor weight, tensor bias, tensor running_mean, tensor running_var, int training, double momentum, double eps, int cudnn_enabled);
tensor *atg_bernoulli(tensor self);
tensor *atg_bernoulli1(tensor self, double p);
tensor *atg_bernoulli_(tensor self, tensor p);
tensor *atg_bernoulli_1(tensor self, double p);
tensor *atg_bernoulli_out(tensor result, tensor self);
tensor *atg_bilinear(tensor input1, tensor input2, tensor weight, tensor bias);
tensor *atg_binary_cross_entropy(tensor self, tensor target, tensor weight, int64_t reduction);
tensor *atg_binary_cross_entropy_backward(tensor grad_output, tensor self, tensor target, tensor weight, int64_t reduction);
tensor *atg_binary_cross_entropy_backward_out(tensor grad_input, tensor grad_output, tensor self, tensor target, tensor weight, int64_t reduction);
tensor *atg_binary_cross_entropy_out(tensor output, tensor self, tensor target, tensor weight, int64_t reduction);
tensor *atg_binary_cross_entropy_with_logits(tensor self, tensor target, tensor weight, tensor pos_weight, int64_t reduction);
tensor *atg_binary_cross_entropy_with_logits_backward(tensor grad_output, tensor self, tensor target, tensor weight, tensor pos_weight, int64_t reduction);
tensor *atg_bincount(tensor self, tensor weights, int64_t minlength);
tensor *atg_blackman_window(int64_t window_length, int options_kind, int options_device);
tensor *atg_blackman_window1(int64_t window_length, int periodic, int options_kind, int options_device);
tensor *atg_bmm(tensor self, tensor mat2);
tensor *atg_bmm_out(tensor result, tensor self, tensor mat2);
tensor *atg_broadcast_tensors(tensor *tensors_data, int tensors_len);
tensor *atg_btrifact(tensor self, int pivot);
tensor *atg_btrifact_out(tensor A_LU, tensor pivots, tensor self, int pivot);
tensor *atg_btrifact_with_info(tensor self, int pivot);
tensor *atg_btrifact_with_info_out(tensor A_LU, tensor pivots, tensor info, tensor self, int pivot);
tensor *atg_btrisolve(tensor self, tensor LU_data, tensor LU_pivots);
tensor *atg_btrisolve_out(tensor result, tensor self, tensor LU_data, tensor LU_pivots);
tensor *atg_cat(tensor *tensors_data, int tensors_len, int64_t dim);
tensor *atg_cat_out(tensor result, tensor *tensors_data, int tensors_len, int64_t dim);
tensor *atg_cauchy_(tensor self, double median, double sigma);
tensor *atg_ceil(tensor self);
tensor *atg_ceil_(tensor self);
tensor *atg_ceil_out(tensor result, tensor self);
tensor *atg_celu(tensor self);
tensor *atg_celu_(tensor self);
tensor *atg_chain_matmul(tensor *matrices_data, int matrices_len);
tensor *atg_cholesky(tensor self, int upper);
tensor *atg_cholesky_out(tensor result, tensor self, int upper);
tensor *atg_chunk(tensor self, int64_t chunks, int64_t dim);
tensor *atg_clamp(tensor self, scalar min, scalar max);
tensor *atg_clamp_(tensor self, scalar min, scalar max);
tensor *atg_clamp_max(tensor self, scalar max);
tensor *atg_clamp_max_(tensor self, scalar max);
tensor *atg_clamp_max_out(tensor result, tensor self, scalar max);
tensor *atg_clamp_min(tensor self, scalar min);
tensor *atg_clamp_min_(tensor self, scalar min);
tensor *atg_clamp_min_out(tensor result, tensor self, scalar min);
tensor *atg_clamp_out(tensor result, tensor self, scalar min, scalar max);
tensor *atg_coalesce(tensor self);
tensor *atg_constant_pad_nd(tensor self, int64_t *pad_data, int pad_len);
tensor *atg_contiguous(tensor self);
tensor *atg_conv1d(tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
tensor *atg_conv2d(tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
tensor *atg_conv3d(tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
tensor *atg_conv_tbc(tensor self, tensor weight, tensor bias, int64_t pad);
tensor *atg_conv_tbc_backward(tensor self, tensor input, tensor weight, tensor bias, int64_t pad);
tensor *atg_conv_transpose1d(tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t groups, int64_t *dilation_data, int dilation_len);
tensor *atg_conv_transpose2d(tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t groups, int64_t *dilation_data, int dilation_len);
tensor *atg_conv_transpose3d(tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t groups, int64_t *dilation_data, int dilation_len);
tensor *atg_convolution(tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int transposed, int64_t *output_padding_data, int output_padding_len, int64_t groups);
tensor *atg_copy_sparse_to_sparse_(tensor self, tensor src, int non_blocking);
tensor *atg_cos(tensor self);
tensor *atg_cos_(tensor self);
tensor *atg_cos_out(tensor result, tensor self);
tensor *atg_cosh(tensor self);
tensor *atg_cosh_(tensor self);
tensor *atg_cosh_out(tensor result, tensor self);
tensor *atg_cosine_embedding_loss(tensor input1, tensor input2, tensor target, double margin, int64_t reduction);
tensor *atg_cross(tensor self, tensor other, int64_t dim);
tensor *atg_cross_out(tensor result, tensor self, tensor other, int64_t dim);
tensor *atg_ctc_loss(tensor log_probs, tensor targets, int64_t *input_lengths_data, int input_lengths_len, int64_t *target_lengths_data, int target_lengths_len, int64_t blank, int64_t reduction);
tensor *atg_ctc_loss1(tensor log_probs, tensor targets, tensor input_lengths, tensor target_lengths, int64_t blank, int64_t reduction);
tensor *atg_cudnn_affine_grid_generator(tensor theta, int64_t N, int64_t C, int64_t H, int64_t W);
tensor *atg_cudnn_affine_grid_generator_backward(tensor grad, int64_t N, int64_t C, int64_t H, int64_t W);
tensor *atg_cudnn_batch_norm(tensor input, tensor weight, tensor bias, tensor running_mean, tensor running_var, int training, double exponential_average_factor, double epsilon);
tensor *atg_cudnn_batch_norm_backward(tensor input, tensor grad_output, tensor weight, tensor running_mean, tensor running_var, tensor save_mean, tensor save_var, double epsilon);
tensor *atg_cudnn_convolution(tensor self, tensor weight, tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
tensor *atg_cudnn_convolution_backward_bias(tensor grad_output);
tensor *atg_cudnn_convolution_backward_input(int64_t *self_size_data, int self_size_len, tensor grad_output, tensor weight, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
tensor *atg_cudnn_convolution_backward_weight(int64_t *weight_size_data, int weight_size_len, tensor grad_output, tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
tensor *atg_cudnn_convolution_transpose(tensor self, tensor weight, tensor bias, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
tensor *atg_cudnn_convolution_transpose_backward_bias(tensor grad_output);
tensor *atg_cudnn_convolution_transpose_backward_input(tensor grad_output, tensor weight, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
tensor *atg_cudnn_convolution_transpose_backward_weight(int64_t *weight_size_data, int weight_size_len, tensor grad_output, tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
tensor *atg_cudnn_grid_sampler(tensor self, tensor grid);
tensor *atg_cudnn_grid_sampler_backward(tensor self, tensor grid, tensor grad_output);
tensor *atg_cumprod(tensor self, int64_t dim);
tensor *atg_cumprod1(tensor self, int64_t dim, int dtype);
tensor *atg_cumprod_out(tensor result, tensor self, int64_t dim);
tensor *atg_cumprod_out1(tensor result, tensor self, int64_t dim, int dtype);
tensor *atg_cumsum(tensor self, int64_t dim);
tensor *atg_cumsum1(tensor self, int64_t dim, int dtype);
tensor *atg_cumsum_out(tensor result, tensor self, int64_t dim);
tensor *atg_cumsum_out1(tensor result, tensor self, int64_t dim, int dtype);
tensor *atg_det(tensor self);
tensor *atg_detach(tensor self);
tensor *atg_detach_(tensor self);
tensor *atg_diag(tensor self, int64_t diagonal);
tensor *atg_diag_embed(tensor self, int64_t offset, int64_t dim1, int64_t dim2);
tensor *atg_diag_out(tensor result, tensor self, int64_t diagonal);
tensor *atg_diagflat(tensor self, int64_t offset);
tensor *atg_diagonal(tensor self, int64_t offset, int64_t dim1, int64_t dim2);
tensor *atg_digamma(tensor self);
tensor *atg_digamma_(tensor self);
tensor *atg_digamma_out(tensor result, tensor self);
tensor *atg_dist(tensor self, tensor other);
tensor *atg_div(tensor self, tensor other);
tensor *atg_div1(tensor self, scalar other);
tensor *atg_div_(tensor self, tensor other);
tensor *atg_div_1(tensor self, scalar other);
tensor *atg_div_out(tensor result, tensor self, tensor other);
tensor *atg_dot(tensor self, tensor tensor);
tensor *atg_dot_out(tensor result, tensor self, tensor tensor);
tensor *atg_dropout(tensor input, double p, int train);
tensor *atg_dropout_(tensor self, double p, int train);
tensor *atg_eig(tensor self, int eigenvectors);
tensor *atg_eig_out(tensor e, tensor v, tensor self, int eigenvectors);
tensor *atg_elu(tensor self);
tensor *atg_elu_(tensor self);
tensor *atg_elu_out(tensor output, tensor self);
tensor *atg_embedding(tensor weight, tensor indices, int64_t padding_idx, int scale_grad_by_freq, int sparse);
tensor *atg_embedding_backward(tensor grad, tensor indices, int64_t num_weights, int64_t padding_idx, int scale_grad_by_freq, int sparse);
tensor *atg_embedding_bag(tensor weight, tensor indices, tensor offsets, int scale_grad_by_freq, int64_t mode, int sparse);
tensor *atg_embedding_dense_backward(tensor grad, tensor indices, int64_t num_weights, int64_t padding_idx, int scale_grad_by_freq);
tensor *atg_embedding_renorm_(tensor self, tensor indices, double max_norm, double norm_type);
tensor *atg_embedding_sparse_backward(tensor grad, tensor indices, int64_t num_weights, int64_t padding_idx, int scale_grad_by_freq);
tensor *atg_empty(int64_t *size_data, int size_len, int options_kind, int options_device);
tensor *atg_empty_like(tensor self);
tensor *atg_empty_like1(tensor self, int options_kind, int options_device);
tensor *atg_empty_out(tensor result, int64_t *size_data, int size_len);
tensor *atg_empty_strided(int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int options_kind, int options_device);
tensor *atg_eq(tensor self, scalar other);
tensor *atg_eq1(tensor self, tensor other);
tensor *atg_eq_(tensor self, scalar other);
tensor *atg_eq_1(tensor self, tensor other);
tensor *atg_eq_out(tensor result, tensor self, scalar other);
tensor *atg_eq_out1(tensor result, tensor self, tensor other);
tensor *atg_erf(tensor self);
tensor *atg_erf_(tensor self);
tensor *atg_erf_out(tensor result, tensor self);
tensor *atg_erfc(tensor self);
tensor *atg_erfc_(tensor self);
tensor *atg_erfc_out(tensor result, tensor self);
tensor *atg_erfinv(tensor self);
tensor *atg_erfinv_(tensor self);
tensor *atg_erfinv_out(tensor result, tensor self);
tensor *atg_exp(tensor self);
tensor *atg_exp_(tensor self);
tensor *atg_exp_out(tensor result, tensor self);
tensor *atg_expand(tensor self, int64_t *size_data, int size_len, int implicit);
tensor *atg_expand_as(tensor self, tensor other);
tensor *atg_expm1(tensor self);
tensor *atg_expm1_(tensor self);
tensor *atg_expm1_out(tensor result, tensor self);
tensor *atg_exponential_(tensor self, double lambd);
tensor *atg_eye(int64_t n, int options_kind, int options_device);
tensor *atg_eye1(int64_t n, int64_t m, int options_kind, int options_device);
tensor *atg_eye_out(tensor result, int64_t n);
tensor *atg_eye_out1(tensor result, int64_t n, int64_t m);
tensor *atg_feature_alpha_dropout(tensor input, double p, int train);
tensor *atg_feature_alpha_dropout_(tensor self, double p, int train);
tensor *atg_feature_dropout(tensor input, double p, int train);
tensor *atg_feature_dropout_(tensor self, double p, int train);
tensor *atg_fft(tensor self, int64_t signal_ndim, int normalized);
tensor *atg_fill_(tensor self, scalar value);
tensor *atg_fill_1(tensor self, tensor value);
tensor *atg_flatten(tensor self, int64_t start_dim, int64_t end_dim);
tensor *atg_flip(tensor self, int64_t *dims_data, int dims_len);
tensor *atg_floor(tensor self);
tensor *atg_floor_(tensor self);
tensor *atg_floor_out(tensor result, tensor self);
tensor *atg_fmod(tensor self, scalar other);
tensor *atg_fmod1(tensor self, tensor other);
tensor *atg_fmod_(tensor self, scalar other);
tensor *atg_fmod_1(tensor self, tensor other);
tensor *atg_fmod_out(tensor result, tensor self, scalar other);
tensor *atg_fmod_out1(tensor result, tensor self, tensor other);
tensor *atg_frac(tensor self);
tensor *atg_frac_(tensor self);
tensor *atg_frac_out(tensor result, tensor self);
tensor *atg_fractional_max_pool2d(tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, tensor random_samples);
tensor *atg_fractional_max_pool2d_backward(tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, tensor indices);
tensor *atg_fractional_max_pool2d_backward_out(tensor grad_input, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, tensor indices);
tensor *atg_fractional_max_pool2d_out(tensor output, tensor indices, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, tensor random_samples);
tensor *atg_frobenius_norm(tensor self);
tensor *atg_frobenius_norm1(tensor self, int64_t *dim_data, int dim_len, int keepdim);
tensor *atg_frobenius_norm_out(tensor result, tensor self, int64_t *dim_data, int dim_len, int keepdim);
tensor *atg_full(int64_t *size_data, int size_len, scalar fill_value, int options_kind, int options_device);
tensor *atg_full_like(tensor self, scalar fill_value);
tensor *atg_full_like1(tensor self, scalar fill_value, int options_kind, int options_device);
tensor *atg_full_out(tensor result, int64_t *size_data, int size_len, scalar fill_value);
tensor *atg_gather(tensor self, int64_t dim, tensor index);
tensor *atg_gather_out(tensor result, tensor self, int64_t dim, tensor index);
tensor *atg_ge(tensor self, scalar other);
tensor *atg_ge1(tensor self, tensor other);
tensor *atg_ge_(tensor self, scalar other);
tensor *atg_ge_1(tensor self, tensor other);
tensor *atg_ge_out(tensor result, tensor self, scalar other);
tensor *atg_ge_out1(tensor result, tensor self, tensor other);
tensor *atg_gels(tensor self, tensor A);
tensor *atg_gels_out(tensor X, tensor qr, tensor self, tensor A);
tensor *atg_geometric_(tensor self, double p);
tensor *atg_geqrf(tensor self);
tensor *atg_geqrf_out(tensor result0, tensor result1, tensor self);
tensor *atg_ger(tensor self, tensor vec2);
tensor *atg_ger_out(tensor result, tensor self, tensor vec2);
tensor *atg_gesv(tensor self, tensor A);
tensor *atg_gesv_out(tensor solution, tensor lu, tensor self, tensor A);
tensor *atg_glu(tensor self, int64_t dim);
tensor *atg_glu_backward(tensor grad_output, tensor self, int64_t dim);
tensor *atg_glu_backward_out(tensor grad_input, tensor grad_output, tensor self, int64_t dim);
tensor *atg_glu_out(tensor output, tensor self, int64_t dim);
tensor *atg_grad(tensor self);
tensor *atg_grid_sampler(tensor input, tensor grid, int64_t interpolation_mode, int64_t padding_mode);
tensor *atg_grid_sampler_2d(tensor input, tensor grid, int64_t interpolation_mode, int64_t padding_mode);
tensor *atg_grid_sampler_2d_backward(tensor grad_output, tensor input, tensor grid, int64_t interpolation_mode, int64_t padding_mode);
tensor *atg_grid_sampler_3d(tensor input, tensor grid, int64_t interpolation_mode, int64_t padding_mode);
tensor *atg_grid_sampler_3d_backward(tensor grad_output, tensor input, tensor grid, int64_t interpolation_mode, int64_t padding_mode);
tensor *atg_group_norm(tensor input, int64_t num_groups, tensor weight, tensor bias, double eps, int cudnn_enabled);
tensor *atg_gru(tensor input, tensor hx, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
tensor *atg_gru1(tensor data, tensor batch_sizes, tensor hx, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional);
tensor *atg_gru_cell(tensor input, tensor hx, tensor w_ih, tensor w_hh, tensor b_ih, tensor b_hh);
tensor *atg_gt(tensor self, scalar other);
tensor *atg_gt1(tensor self, tensor other);
tensor *atg_gt_(tensor self, scalar other);
tensor *atg_gt_1(tensor self, tensor other);
tensor *atg_gt_out(tensor result, tensor self, scalar other);
tensor *atg_gt_out1(tensor result, tensor self, tensor other);
tensor *atg_hamming_window(int64_t window_length, int options_kind, int options_device);
tensor *atg_hamming_window1(int64_t window_length, int periodic, int options_kind, int options_device);
tensor *atg_hamming_window2(int64_t window_length, int periodic, double alpha, int options_kind, int options_device);
tensor *atg_hamming_window3(int64_t window_length, int periodic, double alpha, double beta, int options_kind, int options_device);
tensor *atg_hann_window(int64_t window_length, int options_kind, int options_device);
tensor *atg_hann_window1(int64_t window_length, int periodic, int options_kind, int options_device);
tensor *atg_hardshrink(tensor self);
tensor *atg_hardshrink_backward(tensor grad_out, tensor self, scalar lambd);
tensor *atg_hardtanh(tensor self);
tensor *atg_hardtanh_(tensor self);
tensor *atg_hardtanh_out(tensor output, tensor self);
tensor *atg_hinge_embedding_loss(tensor self, tensor target, double margin, int64_t reduction);
tensor *atg_histc(tensor self, int64_t bins);
tensor *atg_histc_out(tensor result, tensor self, int64_t bins);
tensor *atg_hspmm(tensor mat1, tensor mat2);
tensor *atg_hspmm_out(tensor result, tensor mat1, tensor mat2);
tensor *atg_ifft(tensor self, int64_t signal_ndim, int normalized);
tensor *atg_index(tensor self, tensor *indices_data, int indices_len);
tensor *atg_index_add_(tensor self, int64_t dim, tensor index, tensor source);
tensor *atg_index_copy_(tensor self, int64_t dim, tensor index, tensor source);
tensor *atg_index_fill_(tensor self, int64_t dim, tensor index, scalar value);
tensor *atg_index_fill_1(tensor self, int64_t dim, tensor index, tensor value);
tensor *atg_index_put(tensor self, tensor *indices_data, int indices_len, tensor values);
tensor *atg_index_put_(tensor self, tensor *indices_data, int indices_len, tensor values);
tensor *atg_index_select(tensor self, int64_t dim, tensor index);
tensor *atg_index_select_out(tensor result, tensor self, int64_t dim, tensor index);
tensor *atg_indices(tensor self);
tensor *atg_instance_norm(tensor input, tensor weight, tensor bias, tensor running_mean, tensor running_var, int use_input_stats, double momentum, double eps, int cudnn_enabled);
tensor *atg_inverse(tensor self);
tensor *atg_inverse_out(tensor result, tensor self);
tensor *atg_irfft(tensor self, int64_t signal_ndim, int normalized, int onesided, int64_t *signal_sizes_data, int signal_sizes_len);
tensor *atg_isclose(tensor self, tensor other, double rtol, double atol, int equal_nan);
tensor *atg_kl_div(tensor self, tensor target, int64_t reduction);
tensor *atg_kl_div_backward(tensor grad_output, tensor self, tensor target, int64_t reduction);
tensor *atg_kthvalue(tensor self, int64_t k, int64_t dim, int keepdim);
tensor *atg_kthvalue_out(tensor values, tensor indices, tensor self, int64_t k, int64_t dim, int keepdim);
tensor *atg_l1_loss(tensor self, tensor target, int64_t reduction);
tensor *atg_l1_loss_backward(tensor grad_output, tensor self, tensor target, int64_t reduction);
tensor *atg_l1_loss_backward_out(tensor grad_input, tensor grad_output, tensor self, tensor target, int64_t reduction);
tensor *atg_l1_loss_out(tensor output, tensor self, tensor target, int64_t reduction);
tensor *atg_layer_norm(tensor input, int64_t *normalized_shape_data, int normalized_shape_len, tensor weight, tensor bias, double eps, int cudnn_enable);
tensor *atg_le(tensor self, scalar other);
tensor *atg_le1(tensor self, tensor other);
tensor *atg_le_(tensor self, scalar other);
tensor *atg_le_1(tensor self, tensor other);
tensor *atg_le_out(tensor result, tensor self, scalar other);
tensor *atg_le_out1(tensor result, tensor self, tensor other);
tensor *atg_leaky_relu(tensor self);
tensor *atg_leaky_relu_(tensor self);
tensor *atg_leaky_relu_out(tensor output, tensor self);
tensor *atg_lerp(tensor self, tensor end, scalar weight);
tensor *atg_lerp_(tensor self, tensor end, scalar weight);
tensor *atg_lerp_out(tensor result, tensor self, tensor end, scalar weight);
tensor *atg_lgamma(tensor self);
tensor *atg_lgamma_(tensor self);
tensor *atg_lgamma_out(tensor result, tensor self);
tensor *atg_linear(tensor input, tensor weight, tensor bias);
tensor *atg_linspace(scalar start, scalar end, int options_kind, int options_device);
tensor *atg_linspace1(scalar start, scalar end, int64_t steps, int options_kind, int options_device);
tensor *atg_linspace_out(tensor result, scalar start, scalar end);
tensor *atg_linspace_out1(tensor result, scalar start, scalar end, int64_t steps);
tensor *atg_log(tensor self);
tensor *atg_log10(tensor self);
tensor *atg_log10_(tensor self);
tensor *atg_log10_out(tensor result, tensor self);
tensor *atg_log1p(tensor self);
tensor *atg_log1p_(tensor self);
tensor *atg_log1p_out(tensor result, tensor self);
tensor *atg_log2(tensor self);
tensor *atg_log2_(tensor self);
tensor *atg_log2_out(tensor result, tensor self);
tensor *atg_log_(tensor self);
tensor *atg_log_normal_(tensor self, double mean, double std);
tensor *atg_log_out(tensor result, tensor self);
tensor *atg_log_sigmoid(tensor self);
tensor *atg_log_sigmoid_backward(tensor grad_output, tensor self, tensor buffer);
tensor *atg_log_sigmoid_backward_out(tensor grad_input, tensor grad_output, tensor self, tensor buffer);
tensor *atg_log_sigmoid_out(tensor output, tensor self);
tensor *atg_log_softmax(tensor self, int64_t dim);
tensor *atg_log_softmax1(tensor self, int64_t dim, int dtype);
tensor *atg_logdet(tensor self);
tensor *atg_logspace(scalar start, scalar end, int options_kind, int options_device);
tensor *atg_logspace1(scalar start, scalar end, int64_t steps, int options_kind, int options_device);
tensor *atg_logspace_out(tensor result, scalar start, scalar end);
tensor *atg_logspace_out1(tensor result, scalar start, scalar end, int64_t steps);
tensor *atg_logsumexp(tensor self, int64_t dim, int keepdim);
tensor *atg_logsumexp_out(tensor result, tensor self, int64_t dim, int keepdim);
tensor *atg_lstm(tensor input, tensor *hx_data, int hx_len, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
tensor *atg_lstm1(tensor data, tensor batch_sizes, tensor *hx_data, int hx_len, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional);
tensor *atg_lstm_cell(tensor input, tensor *hx_data, int hx_len, tensor w_ih, tensor w_hh, tensor b_ih, tensor b_hh);
tensor *atg_lt(tensor self, scalar other);
tensor *atg_lt1(tensor self, tensor other);
tensor *atg_lt_(tensor self, scalar other);
tensor *atg_lt_1(tensor self, tensor other);
tensor *atg_lt_out(tensor result, tensor self, scalar other);
tensor *atg_lt_out1(tensor result, tensor self, tensor other);
tensor *atg_margin_ranking_loss(tensor input1, tensor input2, tensor target, double margin, int64_t reduction);
tensor *atg_masked_fill_(tensor self, tensor mask, scalar value);
tensor *atg_masked_fill_1(tensor self, tensor mask, tensor value);
tensor *atg_masked_scatter_(tensor self, tensor mask, tensor source);
tensor *atg_masked_select(tensor self, tensor mask);
tensor *atg_masked_select_out(tensor result, tensor self, tensor mask);
tensor *atg_matmul(tensor self, tensor other);
tensor *atg_matmul_out(tensor result, tensor self, tensor other);
tensor *atg_matrix_power(tensor self, int64_t n);
tensor *atg_matrix_rank(tensor self, int symmetric);
tensor *atg_matrix_rank1(tensor self, double tol, int symmetric);
tensor *atg_max(tensor self);
tensor *atg_max1(tensor self, tensor other);
tensor *atg_max2(tensor self, int64_t dim, int keepdim);
tensor *atg_max_out(tensor result, tensor self, tensor other);
tensor *atg_max_out1(tensor max, tensor max_values, tensor self, int64_t dim, int keepdim);
tensor *atg_max_pool1d(tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
tensor *atg_max_pool1d_with_indices(tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
tensor *atg_max_pool2d(tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
tensor *atg_max_pool2d_with_indices(tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
tensor *atg_max_pool2d_with_indices_backward(tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode, tensor indices);
tensor *atg_max_pool2d_with_indices_backward_out(tensor grad_input, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode, tensor indices);
tensor *atg_max_pool2d_with_indices_out(tensor output, tensor indices, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
tensor *atg_max_pool3d(tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
tensor *atg_max_pool3d_with_indices(tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
tensor *atg_max_pool3d_with_indices_backward(tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode, tensor indices);
tensor *atg_max_pool3d_with_indices_backward_out(tensor grad_input, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode, tensor indices);
tensor *atg_max_pool3d_with_indices_out(tensor output, tensor indices, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
tensor *atg_max_unpool2d(tensor self, tensor indices, int64_t *output_size_data, int output_size_len);
tensor *atg_max_unpool2d_backward(tensor grad_output, tensor self, tensor indices, int64_t *output_size_data, int output_size_len);
tensor *atg_max_unpool2d_backward_out(tensor grad_input, tensor grad_output, tensor self, tensor indices, int64_t *output_size_data, int output_size_len);
tensor *atg_max_unpool2d_out(tensor output, tensor self, tensor indices, int64_t *output_size_data, int output_size_len);
tensor *atg_max_unpool3d(tensor self, tensor indices, int64_t *output_size_data, int output_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
tensor *atg_max_unpool3d_backward(tensor grad_output, tensor self, tensor indices, int64_t *output_size_data, int output_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
tensor *atg_max_unpool3d_backward_out(tensor grad_input, tensor grad_output, tensor self, tensor indices, int64_t *output_size_data, int output_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
tensor *atg_max_unpool3d_out(tensor output, tensor self, tensor indices, int64_t *output_size_data, int output_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
tensor *atg_max_values(tensor self, int64_t dim, int keepdim);
tensor *atg_mean(tensor self);
tensor *atg_mean1(tensor self, int dtype);
tensor *atg_mean2(tensor self, int64_t dim, int keepdim);
tensor *atg_mean3(tensor self, int64_t dim, int dtype);
tensor *atg_mean4(tensor self, int64_t dim, int keepdim, int dtype);
tensor *atg_mean_out(tensor result, tensor self, int64_t dim, int keepdim);
tensor *atg_mean_out1(tensor result, tensor self, int64_t dim, int dtype);
tensor *atg_mean_out2(tensor result, tensor self, int64_t dim, int keepdim, int dtype);
tensor *atg_median(tensor self);
tensor *atg_median1(tensor self, int64_t dim, int keepdim);
tensor *atg_median_out(tensor values, tensor indices, tensor self, int64_t dim, int keepdim);
tensor *atg_meshgrid(tensor *tensors_data, int tensors_len);
tensor *atg_min(tensor self);
tensor *atg_min1(tensor self, tensor other);
tensor *atg_min2(tensor self, int64_t dim, int keepdim);
tensor *atg_min_out(tensor result, tensor self, tensor other);
tensor *atg_min_out1(tensor min, tensor min_indices, tensor self, int64_t dim, int keepdim);
tensor *atg_min_values(tensor self, int64_t dim, int keepdim);
tensor *atg_miopen_batch_norm(tensor input, tensor weight, tensor bias, tensor running_mean, tensor running_var, int training, double exponential_average_factor, double epsilon);
tensor *atg_miopen_batch_norm_backward(tensor input, tensor grad_output, tensor weight, tensor running_mean, tensor running_var, tensor save_mean, tensor save_var, double epsilon);
tensor *atg_miopen_convolution(tensor self, tensor weight, tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
tensor *atg_miopen_convolution_backward_bias(tensor grad_output);
tensor *atg_miopen_convolution_backward_input(int64_t *self_size_data, int self_size_len, tensor grad_output, tensor weight, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
tensor *atg_miopen_convolution_backward_weight(int64_t *weight_size_data, int weight_size_len, tensor grad_output, tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
tensor *atg_miopen_convolution_transpose(tensor self, tensor weight, tensor bias, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
tensor *atg_miopen_convolution_transpose_backward_input(tensor grad_output, tensor weight, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
tensor *atg_miopen_convolution_transpose_backward_weight(int64_t *weight_size_data, int weight_size_len, tensor grad_output, tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
tensor *atg_mkldnn_convolution(tensor self, tensor weight, tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups);
tensor *atg_mkldnn_convolution_backward_input(int64_t *self_size_data, int self_size_len, tensor grad_output, tensor weight, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int bias_defined);
tensor *atg_mkldnn_convolution_backward_weights(int64_t *weight_size_data, int weight_size_len, tensor grad_output, tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int bias_defined);
tensor *atg_mm(tensor self, tensor mat2);
tensor *atg_mm_out(tensor result, tensor self, tensor mat2);
tensor *atg_mode(tensor self, int64_t dim, int keepdim);
tensor *atg_mode_out(tensor values, tensor indices, tensor self, int64_t dim, int keepdim);
tensor *atg_mse_loss(tensor self, tensor target, int64_t reduction);
tensor *atg_mse_loss_backward(tensor grad_output, tensor self, tensor target, int64_t reduction);
tensor *atg_mse_loss_backward_out(tensor grad_input, tensor grad_output, tensor self, tensor target, int64_t reduction);
tensor *atg_mse_loss_out(tensor output, tensor self, tensor target, int64_t reduction);
tensor *atg_mul(tensor self, tensor other);
tensor *atg_mul1(tensor self, scalar other);
tensor *atg_mul_(tensor self, tensor other);
tensor *atg_mul_1(tensor self, scalar other);
tensor *atg_mul_out(tensor result, tensor self, tensor other);
tensor *atg_multilabel_margin_loss(tensor self, tensor target, int64_t reduction);
tensor *atg_multilabel_margin_loss_backward(tensor grad_output, tensor self, tensor target, int64_t reduction, tensor is_target);
tensor *atg_multilabel_margin_loss_backward_out(tensor grad_input, tensor grad_output, tensor self, tensor target, int64_t reduction, tensor is_target);
tensor *atg_multilabel_margin_loss_out(tensor output, tensor self, tensor target, int64_t reduction);
tensor *atg_multinomial(tensor self, int64_t num_samples, int replacement);
tensor *atg_multinomial_out(tensor result, tensor self, int64_t num_samples, int replacement);
tensor *atg_mv(tensor self, tensor vec);
tensor *atg_mv_out(tensor result, tensor self, tensor vec);
tensor *atg_mvlgamma(tensor self, int64_t p);
tensor *atg_mvlgamma_(tensor self, int64_t p);
tensor *atg_narrow(tensor self, int64_t dim, int64_t start, int64_t length);
tensor *atg_narrow_copy(tensor self, int64_t dim, int64_t start, int64_t length);
tensor *atg_native_batch_norm(tensor input, tensor weight, tensor bias, tensor running_mean, tensor running_var, int training, double momentum, double eps);
tensor *atg_native_clone(tensor self);
tensor *atg_native_norm(tensor self);
tensor *atg_native_pow(tensor self, scalar exponent);
tensor *atg_native_pow_out(tensor result, tensor self, scalar exponent);
tensor *atg_native_resize_as_(tensor self, tensor the_template);
tensor *atg_native_zero_(tensor self);
tensor *atg_ne(tensor self, scalar other);
tensor *atg_ne1(tensor self, tensor other);
tensor *atg_ne_(tensor self, scalar other);
tensor *atg_ne_1(tensor self, tensor other);
tensor *atg_ne_out(tensor result, tensor self, scalar other);
tensor *atg_ne_out1(tensor result, tensor self, tensor other);
tensor *atg_neg(tensor self);
tensor *atg_neg_(tensor self);
tensor *atg_neg_out(tensor result, tensor self);
tensor *atg_nll_loss(tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index);
tensor *atg_nll_loss2d(tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index);
tensor *atg_nll_loss2d_backward(tensor grad_output, tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index, tensor total_weight);
tensor *atg_nll_loss2d_backward_out(tensor grad_input, tensor grad_output, tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index, tensor total_weight);
tensor *atg_nll_loss2d_out(tensor output, tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index);
tensor *atg_nll_loss_backward(tensor grad_output, tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index, tensor total_weight);
tensor *atg_nll_loss_backward_out(tensor grad_input, tensor grad_output, tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index, tensor total_weight);
tensor *atg_nll_loss_out(tensor output, tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index);
tensor *atg_nonzero(tensor self);
tensor *atg_nonzero_out(tensor result, tensor self);
tensor *atg_norm(tensor self);
tensor *atg_norm1(tensor self, scalar p, int64_t dim, int keepdim);
tensor *atg_norm_except_dim(tensor v, int64_t pow, int64_t dim);
tensor *atg_norm_out(tensor result, tensor self, scalar p, int64_t dim, int keepdim);
tensor *atg_normal(tensor mean, double std);
tensor *atg_normal1(double mean, tensor std);
tensor *atg_normal2(tensor mean, tensor std);
tensor *atg_normal_(tensor self, double mean, double std);
tensor *atg_normal_out(tensor output, tensor mean, double std);
tensor *atg_normal_out1(tensor output, double mean, tensor std);
tensor *atg_normal_out2(tensor output, tensor mean, tensor std);
tensor *atg_nuclear_norm(tensor self, int keepdim);
tensor *atg_nuclear_norm_out(tensor result, tensor self, int keepdim);
tensor *atg_ones(int64_t *size_data, int size_len, int options_kind, int options_device);
tensor *atg_ones_like(tensor self);
tensor *atg_ones_like1(tensor self, int options_kind, int options_device);
tensor *atg_ones_out(tensor result, int64_t *size_data, int size_len);
tensor *atg_orgqr(tensor self, tensor input2);
tensor *atg_orgqr_out(tensor result, tensor self, tensor input2);
tensor *atg_ormqr(tensor self, tensor input2, tensor input3, int left, int transpose);
tensor *atg_ormqr_out(tensor result, tensor self, tensor input2, tensor input3, int left, int transpose);
tensor *atg_pairwise_distance(tensor x1, tensor x2, double p, double eps, int keepdim);
tensor *atg_pdist(tensor self, double p);
tensor *atg_permute(tensor self, int64_t *dims_data, int dims_len);
tensor *atg_pin_memory(tensor self);
tensor *atg_pinverse(tensor self, double rcond);
tensor *atg_pixel_shuffle(tensor self, int64_t upscale_factor);
tensor *atg_poisson(tensor self);
tensor *atg_polygamma(int64_t n, tensor self);
tensor *atg_polygamma_(tensor self, int64_t n);
tensor *atg_polygamma_out(tensor result, int64_t n, tensor self);
tensor *atg_potri(tensor self, int upper);
tensor *atg_potri_out(tensor result, tensor self, int upper);
tensor *atg_potrs(tensor self, tensor input2, int upper);
tensor *atg_potrs_out(tensor result, tensor self, tensor input2, int upper);
tensor *atg_pow(tensor self, scalar exponent);
tensor *atg_pow1(tensor self, tensor exponent);
tensor *atg_pow2(scalar self_scalar, tensor exponent);
tensor *atg_pow_(tensor self, scalar exponent);
tensor *atg_pow_1(tensor self, tensor exponent);
tensor *atg_pow_out(tensor result, tensor self, scalar exponent);
tensor *atg_pow_out1(tensor result, tensor self, tensor exponent);
tensor *atg_pow_out2(tensor result, scalar self_scalar, tensor exponent);
tensor *atg_prelu(tensor self, tensor weight);
tensor *atg_prelu_backward(tensor grad_output, tensor self, tensor weight);
tensor *atg_prod(tensor self);
tensor *atg_prod1(tensor self, int dtype);
tensor *atg_prod2(tensor self, int64_t dim, int keepdim);
tensor *atg_prod3(tensor self, int64_t dim, int dtype);
tensor *atg_prod4(tensor self, int64_t dim, int keepdim, int dtype);
tensor *atg_prod_out(tensor result, tensor self, int64_t dim, int keepdim);
tensor *atg_prod_out1(tensor result, tensor self, int64_t dim, int dtype);
tensor *atg_prod_out2(tensor result, tensor self, int64_t dim, int keepdim, int dtype);
tensor *atg_pstrf(tensor self, int upper);
tensor *atg_pstrf_out(tensor u, tensor piv, tensor self, int upper);
tensor *atg_put_(tensor self, tensor index, tensor source, int accumulate);
tensor *atg_qr(tensor self);
tensor *atg_qr_out(tensor Q, tensor R, tensor self);
tensor *atg_rand(int64_t *size_data, int size_len, int options_kind, int options_device);
tensor *atg_rand_like(tensor self);
tensor *atg_rand_like1(tensor self, int options_kind, int options_device);
tensor *atg_rand_out(tensor result, int64_t *size_data, int size_len);
tensor *atg_randint(int64_t high, int64_t *size_data, int size_len, int options_kind, int options_device);
tensor *atg_randint1(int64_t low, int64_t high, int64_t *size_data, int size_len, int options_kind, int options_device);
tensor *atg_randint_like(tensor self, int64_t high);
tensor *atg_randint_like1(tensor self, int64_t low, int64_t high);
tensor *atg_randint_like2(tensor self, int64_t high, int options_kind, int options_device);
tensor *atg_randint_like3(tensor self, int64_t low, int64_t high, int options_kind, int options_device);
tensor *atg_randint_out(tensor result, int64_t high, int64_t *size_data, int size_len);
tensor *atg_randint_out1(tensor result, int64_t low, int64_t high, int64_t *size_data, int size_len);
tensor *atg_randn(int64_t *size_data, int size_len, int options_kind, int options_device);
tensor *atg_randn_like(tensor self);
tensor *atg_randn_like1(tensor self, int options_kind, int options_device);
tensor *atg_randn_out(tensor result, int64_t *size_data, int size_len);
tensor *atg_random_(tensor self);
tensor *atg_random_1(tensor self, int64_t to);
tensor *atg_random_2(tensor self, int64_t from, int64_t to);
tensor *atg_randperm(int64_t n, int options_kind, int options_device);
tensor *atg_randperm_out(tensor result, int64_t n);
tensor *atg_range(scalar start, scalar end, int options_kind, int options_device);
tensor *atg_range1(scalar start, scalar end, scalar step, int options_kind, int options_device);
tensor *atg_range_out(tensor result, scalar start, scalar end);
tensor *atg_range_out1(tensor result, scalar start, scalar end, scalar step);
tensor *atg_reciprocal(tensor self);
tensor *atg_reciprocal_(tensor self);
tensor *atg_reciprocal_out(tensor result, tensor self);
tensor *atg_reflection_pad1d(tensor self, int64_t *padding_data, int padding_len);
tensor *atg_reflection_pad1d_backward(tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_reflection_pad1d_backward_out(tensor grad_input, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_reflection_pad1d_out(tensor output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_reflection_pad2d(tensor self, int64_t *padding_data, int padding_len);
tensor *atg_reflection_pad2d_backward(tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_reflection_pad2d_backward_out(tensor grad_input, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_reflection_pad2d_out(tensor output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_relu(tensor self);
tensor *atg_relu_(tensor self);
tensor *atg_remainder(tensor self, scalar other);
tensor *atg_remainder1(tensor self, tensor other);
tensor *atg_remainder_(tensor self, scalar other);
tensor *atg_remainder_1(tensor self, tensor other);
tensor *atg_remainder_out(tensor result, tensor self, scalar other);
tensor *atg_remainder_out1(tensor result, tensor self, tensor other);
tensor *atg_renorm(tensor self, scalar p, int64_t dim, scalar maxnorm);
tensor *atg_renorm_(tensor self, scalar p, int64_t dim, scalar maxnorm);
tensor *atg_renorm_out(tensor result, tensor self, scalar p, int64_t dim, scalar maxnorm);
tensor *atg_repeat(tensor self, int64_t *repeats_data, int repeats_len);
tensor *atg_replication_pad1d(tensor self, int64_t *padding_data, int padding_len);
tensor *atg_replication_pad1d_backward(tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_replication_pad1d_backward_out(tensor grad_input, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_replication_pad1d_out(tensor output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_replication_pad2d(tensor self, int64_t *padding_data, int padding_len);
tensor *atg_replication_pad2d_backward(tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_replication_pad2d_backward_out(tensor grad_input, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_replication_pad2d_out(tensor output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_replication_pad3d(tensor self, int64_t *padding_data, int padding_len);
tensor *atg_replication_pad3d_backward(tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_replication_pad3d_backward_out(tensor grad_input, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_replication_pad3d_out(tensor output, tensor self, int64_t *padding_data, int padding_len);
tensor *atg_reshape(tensor self, int64_t *shape_data, int shape_len);
tensor *atg_reshape_as(tensor self, tensor other);
tensor *atg_resize_(tensor self, int64_t *size_data, int size_len);
tensor *atg_resize_as_(tensor self, tensor the_template);
tensor *atg_rfft(tensor self, int64_t signal_ndim, int normalized, int onesided);
tensor *atg_rnn_relu(tensor input, tensor hx, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
tensor *atg_rnn_relu1(tensor data, tensor batch_sizes, tensor hx, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional);
tensor *atg_rnn_relu_cell(tensor input, tensor hx, tensor w_ih, tensor w_hh, tensor b_ih, tensor b_hh);
tensor *atg_rnn_tanh(tensor input, tensor hx, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
tensor *atg_rnn_tanh1(tensor data, tensor batch_sizes, tensor hx, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional);
tensor *atg_rnn_tanh_cell(tensor input, tensor hx, tensor w_ih, tensor w_hh, tensor b_ih, tensor b_hh);
tensor *atg_roipooling2d_backward(tensor input, tensor rois, int64_t pooledHeight, int64_t pooledWidth, double spatialScale, tensor gradOutput, tensor argmaxes);
tensor *atg_roll(tensor self, int64_t *shifts_data, int shifts_len, int64_t *dims_data, int dims_len);
tensor *atg_rot90(tensor self, int64_t k, int64_t *dims_data, int dims_len);
tensor *atg_round(tensor self);
tensor *atg_round_(tensor self);
tensor *atg_round_out(tensor result, tensor self);
tensor *atg_rrelu(tensor self, int training);
tensor *atg_rrelu_(tensor self, int training);
tensor *atg_rrelu_with_noise(tensor self, tensor noise, int training);
tensor *atg_rrelu_with_noise_(tensor self, tensor noise, int training);
tensor *atg_rrelu_with_noise_out(tensor output, tensor self, tensor noise, int training);
tensor *atg_rsqrt(tensor self);
tensor *atg_rsqrt_(tensor self);
tensor *atg_rsqrt_out(tensor result, tensor self);
tensor *atg_rsub(tensor self, tensor other);
tensor *atg_rsub1(tensor self, scalar other);
tensor *atg_s_native_addmm(tensor self, tensor mat1, tensor mat2);
tensor *atg_s_native_addmm_(tensor self, tensor mat1, tensor mat2);
tensor *atg_s_native_addmm_out(tensor result, tensor self, tensor mat1, tensor mat2);
tensor *atg_scatter_(tensor self, int64_t dim, tensor index, tensor src);
tensor *atg_scatter_1(tensor self, int64_t dim, tensor index, scalar value);
tensor *atg_scatter_add_(tensor self, int64_t dim, tensor index, tensor src);
tensor *atg_select(tensor self, int64_t dim, int64_t index);
tensor *atg_selu(tensor self);
tensor *atg_selu_(tensor self);
tensor *atg_set_(tensor self);
tensor *atg_set_1(tensor self, tensor source);
tensor *atg_set_requires_grad(tensor self, int r);
tensor *atg_sigmoid(tensor self);
tensor *atg_sigmoid_(tensor self);
tensor *atg_sigmoid_out(tensor result, tensor self);
tensor *atg_sign(tensor self);
tensor *atg_sign_(tensor self);
tensor *atg_sign_out(tensor result, tensor self);
tensor *atg_sin(tensor self);
tensor *atg_sin_(tensor self);
tensor *atg_sin_out(tensor result, tensor self);
tensor *atg_sinh(tensor self);
tensor *atg_sinh_(tensor self);
tensor *atg_sinh_out(tensor result, tensor self);
tensor *atg_slice(tensor self, int64_t dim, int64_t start, int64_t end, int64_t step);
tensor *atg_slogdet(tensor self);
tensor *atg_smm(tensor self, tensor mat2);
tensor *atg_smooth_l1_loss(tensor self, tensor target, int64_t reduction);
tensor *atg_smooth_l1_loss_backward(tensor grad_output, tensor self, tensor target, int64_t reduction);
tensor *atg_smooth_l1_loss_backward_out(tensor grad_input, tensor grad_output, tensor self, tensor target, int64_t reduction);
tensor *atg_smooth_l1_loss_out(tensor output, tensor self, tensor target, int64_t reduction);
tensor *atg_soft_margin_loss(tensor self, tensor target, int64_t reduction);
tensor *atg_soft_margin_loss_backward(tensor grad_output, tensor self, tensor target, int64_t reduction);
tensor *atg_soft_margin_loss_backward_out(tensor grad_input, tensor grad_output, tensor self, tensor target, int64_t reduction);
tensor *atg_soft_margin_loss_out(tensor output, tensor self, tensor target, int64_t reduction);
tensor *atg_softmax(tensor self, int64_t dim);
tensor *atg_softmax1(tensor self, int64_t dim, int dtype);
tensor *atg_softplus(tensor self);
tensor *atg_softplus_out(tensor output, tensor self);
tensor *atg_softshrink(tensor self);
tensor *atg_softshrink_out(tensor output, tensor self);
tensor *atg_sort(tensor self, int64_t dim, int descending);
tensor *atg_sort_out(tensor values, tensor indices, tensor self, int64_t dim, int descending);
tensor *atg_sparse_coo_tensor(int64_t *size_data, int size_len, int options_kind, int options_device);
tensor *atg_sparse_coo_tensor1(tensor indices, tensor values, int options_kind, int options_device);
tensor *atg_sparse_coo_tensor2(tensor indices, tensor values, int64_t *size_data, int size_len, int options_kind, int options_device);
tensor *atg_sparse_resize_(tensor self, int64_t *size_data, int size_len, int64_t sparse_dim, int64_t dense_dim);
tensor *atg_sparse_resize_and_clear_(tensor self, int64_t *size_data, int size_len, int64_t sparse_dim, int64_t dense_dim);
tensor *atg_split(tensor self, int64_t split_size, int64_t dim);
tensor *atg_split_with_sizes(tensor self, int64_t *split_sizes_data, int split_sizes_len, int64_t dim);
tensor *atg_sqrt(tensor self);
tensor *atg_sqrt_(tensor self);
tensor *atg_sqrt_out(tensor result, tensor self);
tensor *atg_squeeze(tensor self);
tensor *atg_squeeze1(tensor self, int64_t dim);
tensor *atg_squeeze_(tensor self);
tensor *atg_squeeze_1(tensor self, int64_t dim);
tensor *atg_sspaddmm(tensor self, tensor mat1, tensor mat2);
tensor *atg_sspaddmm_out(tensor result, tensor self, tensor mat1, tensor mat2);
tensor *atg_stack(tensor *tensors_data, int tensors_len, int64_t dim);
tensor *atg_stack_out(tensor result, tensor *tensors_data, int tensors_len, int64_t dim);
tensor *atg_std(tensor self, int unbiased);
tensor *atg_std1(tensor self, int64_t dim, int unbiased, int keepdim);
tensor *atg_std_out(tensor result, tensor self, int64_t dim, int unbiased, int keepdim);
tensor *atg_stft(tensor self, int64_t n_fft, int64_t hop_length, int64_t win_length, tensor window, int normalized, int onesided);
tensor *atg_sub(tensor self, tensor other);
tensor *atg_sub1(tensor self, scalar other);
tensor *atg_sub_(tensor self, tensor other);
tensor *atg_sub_1(tensor self, scalar other);
tensor *atg_sub_out(tensor result, tensor self, tensor other);
tensor *atg_sum(tensor self);
tensor *atg_sum1(tensor self, int dtype);
tensor *atg_sum2(tensor self, int64_t *dim_data, int dim_len, int keepdim);
tensor *atg_sum3(tensor self, int64_t *dim_data, int dim_len, int dtype);
tensor *atg_sum4(tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
tensor *atg_sum_out(tensor result, tensor self, int64_t *dim_data, int dim_len, int keepdim);
tensor *atg_sum_out1(tensor result, tensor self, int64_t *dim_data, int dim_len, int dtype);
tensor *atg_sum_out2(tensor result, tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
tensor *atg_svd(tensor self, int some, int compute_uv);
tensor *atg_svd_out(tensor U, tensor S, tensor V, tensor self, int some, int compute_uv);
tensor *atg_symeig(tensor self, int eigenvectors, int upper);
tensor *atg_symeig_out(tensor e, tensor V, tensor self, int eigenvectors, int upper);
tensor *atg_t(tensor self);
tensor *atg_t_(tensor self);
tensor *atg_take(tensor self, tensor index);
tensor *atg_take_out(tensor result, tensor self, tensor index);
tensor *atg_tan(tensor self);
tensor *atg_tan_(tensor self);
tensor *atg_tan_out(tensor result, tensor self);
tensor *atg_tanh(tensor self);
tensor *atg_tanh_(tensor self);
tensor *atg_tanh_out(tensor result, tensor self);
tensor *atg_tensordot(tensor self, tensor other, int64_t *dims_self_data, int dims_self_len, int64_t *dims_other_data, int dims_other_len);
tensor *atg_threshold(tensor self, scalar threshold, scalar value);
tensor *atg_threshold_(tensor self, scalar threshold, scalar value);
tensor *atg_threshold_backward(tensor grad_output, tensor self, scalar threshold);
tensor *atg_threshold_out(tensor result, tensor self, scalar threshold, scalar value);
tensor *atg_to(tensor self, int device);
tensor *atg_to1(tensor self, int options_kind, int options_device, int non_blocking, int copy);
tensor *atg_to2(tensor self, int dtype, int non_blocking, int copy);
tensor *atg_to3(tensor self, tensor other, int non_blocking, int copy);
tensor *atg_to4(tensor self, int device, int dtype, int non_blocking, int copy);
tensor *atg_to_dense(tensor self);
tensor *atg_to_sparse(tensor self);
tensor *atg_to_sparse1(tensor self, int64_t sparse_dim);
tensor *atg_topk(tensor self, int64_t k, int64_t dim, int largest, int sorted);
tensor *atg_topk_out(tensor values, tensor indices, tensor self, int64_t k, int64_t dim, int largest, int sorted);
tensor *atg_totype(tensor self, int scalar_type);
tensor *atg_trace(tensor self);
tensor *atg_transpose(tensor self, int64_t dim0, int64_t dim1);
tensor *atg_transpose_(tensor self, int64_t dim0, int64_t dim1);
tensor *atg_tril(tensor self, int64_t diagonal);
tensor *atg_tril_(tensor self, int64_t diagonal);
tensor *atg_tril_out(tensor result, tensor self, int64_t diagonal);
tensor *atg_triplet_margin_loss(tensor anchor, tensor positive, tensor negative, double margin, double p, double eps, int swap, int64_t reduction);
tensor *atg_triu(tensor self, int64_t diagonal);
tensor *atg_triu_(tensor self, int64_t diagonal);
tensor *atg_triu_out(tensor result, tensor self, int64_t diagonal);
tensor *atg_trtrs(tensor self, tensor A, int upper, int transpose, int unitriangular);
tensor *atg_trtrs_out(tensor X, tensor M, tensor self, tensor A, int upper, int transpose, int unitriangular);
tensor *atg_trunc(tensor self);
tensor *atg_trunc_(tensor self);
tensor *atg_trunc_out(tensor result, tensor self);
tensor *atg_type_as(tensor self, tensor other);
tensor *atg_unbind(tensor self, int64_t dim);
tensor *atg_unfold(tensor self, int64_t dimension, int64_t size, int64_t step);
tensor *atg_uniform_(tensor self, double from, double to);
tensor *atg_unsqueeze(tensor self, int64_t dim);
tensor *atg_unsqueeze_(tensor self, int64_t dim);
tensor *atg_upsample_bilinear2d(tensor self, int64_t *output_size_data, int output_size_len, int align_corners);
tensor *atg_upsample_bilinear2d_backward(tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners);
tensor *atg_upsample_bilinear2d_backward_out(tensor grad_input, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners);
tensor *atg_upsample_bilinear2d_out(tensor output, tensor self, int64_t *output_size_data, int output_size_len, int align_corners);
tensor *atg_upsample_linear1d(tensor self, int64_t *output_size_data, int output_size_len, int align_corners);
tensor *atg_upsample_linear1d_backward(tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners);
tensor *atg_upsample_linear1d_backward_out(tensor grad_input, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners);
tensor *atg_upsample_linear1d_out(tensor output, tensor self, int64_t *output_size_data, int output_size_len, int align_corners);
tensor *atg_upsample_nearest1d(tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_upsample_nearest1d_backward(tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len);
tensor *atg_upsample_nearest1d_backward_out(tensor grad_input, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len);
tensor *atg_upsample_nearest1d_out(tensor output, tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_upsample_nearest2d(tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_upsample_nearest2d_backward(tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len);
tensor *atg_upsample_nearest2d_backward_out(tensor grad_input, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len);
tensor *atg_upsample_nearest2d_out(tensor output, tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_upsample_nearest3d(tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_upsample_nearest3d_backward(tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len);
tensor *atg_upsample_nearest3d_backward_out(tensor grad_input, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len);
tensor *atg_upsample_nearest3d_out(tensor output, tensor self, int64_t *output_size_data, int output_size_len);
tensor *atg_upsample_trilinear3d(tensor self, int64_t *output_size_data, int output_size_len, int align_corners);
tensor *atg_upsample_trilinear3d_backward(tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners);
tensor *atg_upsample_trilinear3d_backward_out(tensor grad_input, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners);
tensor *atg_upsample_trilinear3d_out(tensor output, tensor self, int64_t *output_size_data, int output_size_len, int align_corners);
tensor *atg_values(tensor self);
tensor *atg_var(tensor self, int unbiased);
tensor *atg_var1(tensor self, int64_t dim, int unbiased, int keepdim);
tensor *atg_var_out(tensor result, tensor self, int64_t dim, int unbiased, int keepdim);
tensor *atg_view(tensor self, int64_t *size_data, int size_len);
tensor *atg_view_as(tensor self, tensor other);
tensor *atg_where(tensor condition, tensor self, tensor other);
tensor *atg_zero_(tensor self);
tensor *atg_zeros(int64_t *size_data, int size_len, int options_kind, int options_device);
tensor *atg_zeros_like(tensor self);
tensor *atg_zeros_like1(tensor self, int options_kind, int options_device);
tensor *atg_zeros_out(tensor result, int64_t *size_data, int size_len);
